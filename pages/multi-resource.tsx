import { ConnectButton, useAddRecentTransaction } from "@rainbow-me/rainbowkit"
import type { NextPage } from "next"
import Head from "next/head"
import styles from "../styles/Home.module.css"
import { rmrkMultiResourceContract } from "../constants"
import {
  useAccount,
  useProvider,
  useSigner,
} from "wagmi"
import { Contract, Signer } from "ethers"
import NftList from "./nftList"
import { useEffect, useState } from "react"

const MultiResource: NextPage = () => {
  const provider = useProvider()
  const { data: signer, isSuccess } = useSigner()
  const { address, isConnected } = useAccount()
  const addRecentTransaction = useAddRecentTransaction()

  async function getOwnedNfts() {
    const nfts = []

    if (signer instanceof Signer) {
      const multiResourceContract = new Contract(
        rmrkMultiResourceContract.addressOrName,
        rmrkMultiResourceContract.contractInterface,
        signer
      )
      const nftSupply = await multiResourceContract.totalSupply()
      for (let i = 0; i < nftSupply; i++) {
        let isOwner = false
        try {
          isOwner =
            (await multiResourceContract.connect(signer).ownerOf(i)) ==
            (await signer.getAddress())
        } catch (error) {
          console.log(error)
        }
        if (isOwner) {
          nfts.push({
            tokenId: i,
            owner: await signer.getAddress(),
            tokenUri: await multiResourceContract.tokenURI(i),
          })
        }
      }
    }
    return nfts;
  }

  async function mintNft() {
    if (signer instanceof Signer) {
      const multiResourceContract = new Contract(
        rmrkMultiResourceContract.addressOrName,
        rmrkMultiResourceContract.contractInterface,
        signer
      )

      const tx = await multiResourceContract
        .connect(signer)
        .mint(await signer.getAddress(), 1)

      addRecentTransaction({
        hash: tx.hash,
        description: "Minting a new RMRK NFT",
        confirmations: 3,
      })
    }
  }

  const [ownedNfts, setOwnedNfts] = useState<
    { tokenId: number; owner: string; tokenUri: string }[]
  >([])

  useEffect(() => {
    console.log("getting owned nfts")
    getOwnedNfts().then((nfts) => {
      setOwnedNfts(nfts)
    })
  }, [signer])

  return (
    <div className={styles.container}>
      <Head>
        <title>RMRK Multi-resource App</title>
        <meta
          name="description"
          content="Generated by @rainbow-me/create-rainbowkit"
        />
        {/*<link rel="icon" href="/favicon.ico" />*/}
      </Head>

      <main className={styles.main}>
        <ConnectButton />

        <h1 className={styles.title}>Multi-resource Demo</h1>
        <p className={styles.description}>
          Mint an NFT and attach additional resources below:
        </p>
        <button
          onClick={() => {
            mintNft().then((r) => getOwnedNfts())
          }}
          className={styles.button}
        >
          Mint NFT
        </button>
        <p>It might take a few minutes to show your NFTs when just minted.</p>

        <NftList nfts={ownedNfts} />
      </main>

      <footer className={styles.footer}></footer>
    </div>
  )
}

export default MultiResource
