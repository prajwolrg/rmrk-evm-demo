import { ConnectButton, useAddRecentTransaction } from "@rainbow-me/rainbowkit"
import type { NextPage } from "next"
import Head from "next/head"
import styles from "../styles/Home.module.css"
import {
  erc721ABI,
  useAccount,
  useContract,
  useProvider,
  useSigner,
} from "wagmi"
import { Contract, Signer } from "ethers"
import NftList from "../components/nft-list"
import React, { useEffect, useState } from "react"
import Image from "next/image"
import Link from "next/link"
import abis from "../abis/abis"
import {
  marketplaceContractDetails,
  nestingFactoryContractDetails,
} from "../constants"
import Nft from "../components/nft"

interface NftData {
  tokenId: number
  owner: string
  tokenUri: string
  tokenContract: string
}

const Marketplace: NextPage = () => {
  const provider = useProvider()
  const { data: signer, isSuccess } = useSigner()
  const { address, isConnected } = useAccount()
  const addRecentTransaction = useAddRecentTransaction()
  const [loading, setLoading] = useState<boolean>(true)
  const [priceInput, setPriceInput] = useState<number>(0)
  const [ownedNfts, setOwnedNfts] = useState<NftData[]>([])
  const [listedNfts, setListedNfts] = useState<NftData[]>([])

  const marketplaceContract = useContract({
    ...marketplaceContractDetails,
    signerOrProvider: signer,
  })

  const factoryContract = useContract({
    ...nestingFactoryContractDetails,
    signerOrProvider: signer,
  })

  function handlePriceInput(e: React.ChangeEvent<HTMLInputElement>) {
    setPriceInput(Number(e.target.value))
  }

  async function getListedNfts() {
    const nfts: NftData[] = []
    const totalListings = await marketplaceContract.totalListings()
    for (let i = 0; i < totalListings; i++) {
      const nft = await marketplaceContract.listings(i)
      const tokenContract = new Contract(nft[2], erc721ABI, provider)
      nfts.push({
        tokenId: nft[3],
        owner: nft[1],
        tokenUri: await tokenContract.tokenURI(i),
        tokenContract: nft[2],
      })
    }
    return nfts
  }

  async function getOwnedNfts() {
    const nfts: NftData[] = []

    if (signer instanceof Signer) {
      // const rmrkCollections: Contract[] = []
      const allRmrkCollectionDeployments =
        await factoryContract.getCollections()
      for (let i = 0; i < allRmrkCollectionDeployments.length; i++) {
        console.log(allRmrkCollectionDeployments[i])
        const collectionContract = new Contract(
          allRmrkCollectionDeployments[i],
          abis.multiResourceAbi,
          provider
        )
        // rmrkCollections.push(collectionContract)
        const nftSupply = await collectionContract.totalSupply()
        for (let i = 0; i < nftSupply; i++) {
          let isOwner = false
          try {
            isOwner =
              (await collectionContract.connect(signer).ownerOf(i)) == address
          } catch (error) {
            console.log(error)
          }
          if (isOwner) {
            nfts.push({
              tokenId: i,
              owner: await signer.getAddress(),
              tokenUri: await collectionContract.tokenURI(i),
              tokenContract: collectionContract.address,
            })
          }
        }
      }
    }
    return nfts
  }

  async function sellNft() {
    // if (signer instanceof Signer) {
    //   const options = {
    //     value: nestingContract.pricePerMint(),
    //   }
    //   const tx = await nestingContract
    //     .connect(signer)
    //     .mint(await signer.getAddress(), 1, options)
    //
    //   addRecentTransaction({
    //     hash: tx.hash,
    //     description: "Minting a new RMRK NFT",
    //     confirmations: 1,
    //   })
    // }
  }

  function fetchData() {
    setLoading(true)
    getListedNfts().then((nfts) => {
      setListedNfts(nfts)
      setLoading(false)
    })
    getOwnedNfts().then((nfts) => {
      setOwnedNfts(nfts)
      setLoading(false)
    })
  }

  useEffect(() => {
    console.log("Loading chain data")
    fetchData()
  }, [signer])

  return (
    <div className={styles.container}>
      <Head>
        <title>RMRK Marketplace</title>
        <meta
          name="description"
          content="Generated by @rainbow-me/create-rainbowkit"
        />
      </Head>

      <main className={styles.main}>
        <ConnectButton />

        <h1 className={styles.title}>RMRK Marketplace</h1>

        <p className="mb-4">Buy or Sell NFTs on the RMRK Marketplace:</p>

        <div className="form-control w-full max-w-xs mb-2">
          <label className="label">
            <span className="label-text">Price per NFT mint (in wei)</span>
          </label>
          <input
            inputMode="numeric"
            placeholder="Price"
            className="input input-bordered w-full max-w-xs my-0.5"
            value={priceInput}
            onChange={handlePriceInput}
          ></input>
        </div>

        <p className="mt-5">
          Your RMRK NFT Contract will be deployed on the Moonbase Alpha testnet.{" "}
        </p>

        <h3 className={styles.description}>
          Your RMRK NFTs: {ownedNfts?.length}
        </h3>
        <div className="flex flex-wrap justify-center">
          {ownedNfts?.map((nft, index) => {
            return (
              <div key={index}>
                <Nft
                  tokenContract={nft.tokenContract}
                  tokenId={nft.tokenId}
                  tokenUri={nft.tokenUri}
                  tokenType={"contract"}
                />
              </div>
            )
          })}
        </div>

        <h3 className={styles.description}>
          NFTs for sale: {listedNfts?.length}
        </h3>
        <div className="flex flex-wrap justify-center">
          {listedNfts?.map((nft, index) => {
            return (
              <div key={index}>
                <Nft
                  //TODO add collection name in the NFT card component
                  tokenContract={nft.tokenContract}
                  tokenId={nft.tokenId}
                  tokenUri={nft.tokenUri}
                  tokenType={"contract"}
                />
              </div>
            )
          })}
        </div>

        {loading && <progress className="progress mt-2 w-72"></progress>}
      </main>

      <footer className={styles.footer}></footer>
    </div>
  )
}

export default Marketplace
